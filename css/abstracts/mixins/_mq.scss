@mixin mq($media) {
     @media only screen and #{$media}{
        @content;
    }
}

/// Sass Media Queries
/// @param {list} $args...
/// @link http://rafalbromirski.com/
/// @link http://github.com/paranoida/sass-mediaqueries
/// @author Rafal Bromirski

@mixin mq($args...) {
  $media-type: 'only screen';
  $media-type-key: 'media-type';
  $args: keywords($args);
  $expr: '';

  @if map-has-key($args, $media-type-key) {
    $media-type: map-get($args, $media-type-key);
    $args: map-remove($args, $media-type-key);
  }

  @each $key, $value in $args {
    @if $value {
      $expr: "#{$expr} and (#{$key}: #{$value})";
    }
  }

  @media #{$media-type} #{$expr} {
    @content;
  }
}

/// Media Queries for screen
/// @param {string} $min
/// @param {string} $max
/// @param {boolean} $orientation [false]

@mixin screen($min, $max, $orientation: false) {
  @include mq($min-width: $min, $max-width: $max, $orientation: $orientation) {
    @content;
  }
}

/// Media Queries for max screen
/// @param {string} $max
@mixin max-screen($max) {
  @include mq($max-width: $max) {
    @content;
  }
}


/// Media Queries for min screen
/// @param {string} $min
@mixin min-screen($min) {
  @include mq($min-width: $min) {
    @content;
  }
}

/// Media Queries for screen height
/// @param {string} $min
/// @param {string} $max
/// @param {boolean} $orientation [false]
@mixin screen-height($min, $max, $orientation: false) {
  @include mq($min-height: $min, $max-height: $max, $orientation: $orientation) {
    @content;
  }
}

/// Media Queries for max screen height
/// @param {string} $max
@mixin max-screen-height($max) {
  @include mq($max-height: $max) {
    @content;
  }
}

/// Media Queries for min screen height
/// @param {string} $min
@mixin min-screen-height($min) {
  @include mq($min-height: $min) {
    @content;
  }
}

/// Media Queries for iPhone4
/// @param {boolean} $orientation [false]
@mixin iphone4($orientation: false) {
  $min: 320px;
  $max: 480px;
  $pixel-ratio: 2;
  $aspect-ratio: '2/3';

  @include mq(
    $min-device-width: $min,
    $max-device-width: $max,
    $orientation: $orientation,
    $device-aspect-ratio: $aspect-ratio,
    $-webkit-device-pixel-ratio: $pixel-ratio
  ) {
    @content;
  }
}

/// Media Queries for iPhone5
/// @param {boolean} $orientation [false]
@mixin iphone5($orientation: false) {
  $min: 320px;
  $max: 568px;
  $pixel-ratio: 2;
  $aspect-ratio: '40/71';

  @include mq(
    $min-device-width: $min,
    $max-device-width: $max,
    $orientation: $orientation,
    $device-aspect-ratio: $aspect-ratio,
    $-webkit-device-pixel-ratio: $pixel-ratio
  ) {
    @content;
  }
}

/// Media Queries for iPhone6
/// @param {boolean} $orientation [false]
@mixin iphone6($orientation: false) {
  $min: 375px;
  $max: 667px;
  $pixel-ratio: 2;

  @include mq(
    $min-device-width: $min,
    $max-device-width: $max,
    $orientation: $orientation,
    $-webkit-device-pixel-ratio: $pixel-ratio
  ) {
    @content;
  }
}

/// Media Queries for iPhone6 Plus
/// @param {boolean} $orientation [false]
@mixin iphone6-plus($orientation: false) {
  $min: 414px;
  $max: 736px;
  $pixel-ratio: 3;

  @include mq(
    $min-device-width: $min,
    $max-device-width: $max,
    $orientation: $orientation,
    $-webkit-device-pixel-ratio: $pixel-ratio
  ) {
    @content;
  }
}

/// Media Queries for iPad All
/// @param {boolean} $orientation [false]
@mixin ipad($orientation: false) {
  $min: 768px;
  $max: 1024px;

  @include mq(
    $min-device-width: $min,
    $max-device-width: $max,
    $orientation: $orientation
  ) {
    @content;
  }
}

/// Media Queries for iPad (Retina)
/// @param {boolean} $orientation [false]
@mixin ipad-retina($orientation: false) {
  $min: 768px;
  $max: 1024px;
  $pixel-ratio: 2;

  @include mq(
    $min-device-width: $min,
    $max-device-width: $max,
    $orientation: $orientation,
    $-webkit-device-pixel-ratio: $pixel-ratio
  ) {
    @content;
  }
}

/// Media Queries for orientation
@mixin landscape() {
  @include mq($orientation: landscape) {
    @content;
  }
}

/// Media Queries for portrait
@mixin portrait() {
  @include mq($orientation: portrait) {
    @content;
  }
}
